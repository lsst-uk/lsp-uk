#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


# Create Openstack  & Kubernetes Cluster
# --------------------------------------

# https://github.com/stvoutsin/lsp-uk/blob/master/notes/20200416-LSP-Openstack-Edinburgh.txt



# The following assumes we have already setup the Admin node running rancher and kubectl


# Clone Rubin Deploy Scripts
# user@lsp-admin
# ---------------------------


pushd ${HOME:?}

  git clone https://github.com/lsst-sqre/lsp-deploy

   pushd lsp-deploy/


# Create Dashboard for K8s
# user@lsp-admin
# -------------------------

kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta6/aio/deploy/recommended.yaml

## Copy kubectl config from Rancher GUI, into ~/.kube/config



# Edit Nublado Values
# ----------------------
nano develop-gke/nublado-values.yaml

..
# Put the FQDN you want to access nublado at here
fqdn: 'lsp.roe.ac.uk'

# Put in Github oauth information here about your application
oauth_client_id: ''
oauth_secret: ''

# Number of different images to show in the spawner
lab:
  image:
    dailies: 0
    weeklies: 0
    recommended: 1

# What fileserver to mount in the container
routes:
  external:
    fileserver: "fileserver.fileserver.svc.cluster.local"
..




# Create Storage Class
# ------------------------------------------------

nano storageclass.yml
..
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: standard
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: kubernetes.io/cinder
parameters:
  availability: nova
..

kubectl create -f storageclass.yml



# Run Installer one command at a time
# ------------------------------------

ENVIRONMENT=roe
VAULT_TOKEN=
HOSTNAME=lspdev.ddns.net
REVISION=HEAD

echo "Creating initial resources (like RBAC service account for tiller)..."
kubectl apply -f initial-resources.yaml

echo "Using helm to install tiller in cluster..."
helm init --service-account tiller --history-max 200 --wait --upgrade

echo "Add the argocd helm update..."
helm repo add argo https://argoproj.github.io/argo-helm
helm repo update

# Copy argo-cd helm chart and change ClusterIP to LoadBalancer in values.yaml
echo "Update / install argocd using helm..."
helm upgrade \
  --install argocd argo/argo-cd \
  --values argo-cd-values.yaml \
  --set server.ingress.hosts="{$HOSTNAME}" \
  --namespace argocd \
  --wait --timeout 900 \
  --version 2.6.1

echo "Creating vault secret..."
kubectl create secret generic vault-secrets-operator \
  --namespace vault-secrets-operator \
  --from-literal=VAULT_TOKEN=$VAULT_TOKEN \
  --from-literal=VAULT_TOKEN_LEASE_DURATION=31536000 \
  --dry-run -o yaml | kubectl apply -f -

echo "Login to argocd..."
ARGOCD_PASSWORD=`kubectl get pods \
  --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' \
  --namespace argocd | grep argocd-server`

argocd login \
  --plaintext \
  --port-forward \
  --port-forward-namespace argocd \
  --username admin \
  --password ${ARGOCD_PASSWORD:?}

echo "Create vault secrets operator..."
argocd app create vault-secrets-operator \
  --repo https://github.com/stvoutsin/lsp-deploy.git \
  --path services/vault-secrets-operator \
  --dest-namespace vault-secrets-operator \
  --dest-server https://kubernetes.default.svc \
  --upsert \
  --port-forward \
  --port-forward-namespace argocd

argocd app sync vault-secrets-operator \
  --port-forward \
  --port-forward-namespace argocd

echo "Creating top level application"
argocd app create science-platform \
  --repo https://github.com/stvoutsin/lsp-deploy.git \
  --path science-platform --dest-namespace default \
  --dest-server https://kubernetes.default.svc \
  --upsert \
  --revision $REVISION \
  --port-forward \
  --port-forward-namespace argocd \
  --values values-$ENVIRONMENT.yaml

argocd app sync science-platform \
  --port-forward \
  --port-forward-namespace argocd

echo "Syncing critical early applications"
argocd app sync nginx-ingress \
  --port-forward \
  --port-forward-namespace argocd || true
argocd app sync cert-manager \
  --port-forward \
  --port-forward-namespace argocd || true
argocd app sync cert-issuer \
  --port-forward \
  --port-forward-namespace argocd || true

echo "Sync remaining science platform apps"
argocd app sync -l "argocd.argoproj.io/instance=science-platform" \
  --port-forward \
  --port-forward-namespace argocd
 
echo "You can now check on your argo cd installation by running:"
echo "kubectl port-forward service/argocd-server -n argocd 8080:443"
echo "Login with username: admin password: $ARGOCD_PASSWORD"



# Access Landing page
https://lspdev.ddns.net/


# Access Argo-CD
https://lspdev.ddns.net/argo-cd


# Landing page works, but most services are failing because they cannot find a secrets file
